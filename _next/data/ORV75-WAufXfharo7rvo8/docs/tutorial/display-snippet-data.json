{"pageProps":{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"サイトのページに反映させる\",\n      children: \"サイトのページに反映させる\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ここでは、\", _jsx(_components.a, {\n        href: \"/next-mdx-site/docs/tutorial/getting-started/\",\n        children: \"スニペットを登録する\"\n      }), \"\\nにて登録したスニペットをサイトに掲載したいと思います。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"pagesフォルダにsnippetsフォルダを追加する\",\n      children: [_jsx(_components.code, {\n        children: \"pages\"\n      }), \"フォルダに\", _jsx(_components.code, {\n        children: \"snippets\"\n      }), \"フォルダを追加する\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"このプロジェクトでは、サイトの各ページを\\n\", _jsx(_components.code, {\n        children: \"src/pages\"\n      }), \"フォルダ配下で管理しています。\\n\", _jsx(_components.code, {\n        children: \"src/pages/snippets\"\n      }), \"フォルダを作成しましょう。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"slugtsxで動的なルーティングを行う\",\n      children: [_jsx(_components.code, {\n        children: \"[...slug].tsx\"\n      }), \"で動的なルーティングを行う\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"[...slug].tsx\"\n      }), \"を作成して\\n\", _jsx(_components.a, {\n        href: \"https://nextjs-ja-translation-docs.vercel.app/docs/routing/dynamic-routes\",\n        children: \"動的なルーティング\"\n      }), \"\\nを行います。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"実装\",\n      children: \"実装\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"いよいよ実装ですが、細かい解説は行いません。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx:src/pages/snippets/[...slug].tsx\",\n        children: \"import { DefaultPage } from '@/components/default';\\nimport { components } from '@/components/mdx';\\nimport { getAllPaths, getMdxBySlug } from '@/lib/mdx';\\nimport { MdxSource } from '@/types/mdx';\\nimport { GetStaticPaths, GetStaticProps, GetStaticPropsContext } from 'next';\\nimport { MDXRemote } from 'next-mdx-remote';\\nimport { NextParsedUrlQuery } from 'next/dist/server/request-meta';\\n\\ntype Props = {\\n  mdxSource: MdxSource;\\n};\\n\\nexport default function Page({ mdxSource }: Props) {\\n  return (\\n    <DefaultPage>\\n      <MDXRemote {...mdxSource} components={components} />\\n    </DefaultPage>\\n  );\\n}\\n\\nconst BASE_PATH = 'snippets';\\n\\ntype Params = NextParsedUrlQuery & {\\n  slug: string[];\\n};\\n\\nexport const getStaticPaths: GetStaticPaths<Params> = async () => {\\n  return {\\n    paths: getAllPaths(BASE_PATH),\\n    fallback: false,\\n  };\\n};\\n\\nexport const getStaticProps: GetStaticProps<Props, Params> = async ({\\n  params,\\n}: GetStaticPropsContext) => {\\n  const slug = params?.slug as string[];\\n  const mdxSource = await getMdxBySlug(BASE_PATH, slug);\\n\\n  return {\\n    props: {\\n      mdxSource,\\n    },\\n  };\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"実はこのコード、\", _jsx(_components.code, {\n        children: \"src/pages/docs/[...slug].tsx\"\n      }), \"\\nの実装とほとんど変わりありません。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"変更箇所は 2 点\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-diff\",\n        children: \"- import { DocsPage } from '@/components/docs';\\n+ import { DefaultPage } from '@/components/default';\\n\\n...\\n-    <DocsPage>\\n+    <DefaultPage>\\n      <MDXRemote {...mdxSource} components={components} />\\n-    </DocsPage>\\n+    </DefaultPage>\\n\\n...\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"と\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-diff\",\n        children: \"- const BASE_PATH = 'docs';\\n+ const BASE_PATH = 'snippets';\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"のみです。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ページの見た目を変更するために\", _jsx(_components.code, {\n        children: \"DefaultPage\"\n      }), \"を選択し、\\nデータの取得先を変更するために\", _jsx(_components.code, {\n        children: \"snippets\"\n      }), \"に変更しました。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"まとめ\",\n      children: \"まとめ\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここでは、MDX ファイルを作成するだけで\\n簡単にサイトの構築から拡張まで行えることが確認できました。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"次に行うことは、スニペットの一覧ページの作成です。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"また、今回触れた\", _jsx(_components.code, {\n        children: \"MDXRemote\"\n      }), \"の設定方法は\\n\", _jsx(_components.a, {\n        href: \"/docs/guides/settings/\",\n        children: \"こちら\"\n      }), \"\\nを参照してください。\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}