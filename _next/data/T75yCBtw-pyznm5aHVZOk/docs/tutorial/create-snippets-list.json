{"pageProps":{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"一覧ページを設ける\",\n      children: \"一覧ページを設ける\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここでは、登録したスニペットの一覧が閲覧できるページを作ります。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"snippetsフォルダに新たなスニペットを追加する\",\n      children: [_jsx(_components.code, {\n        children: \"snippets\"\n      }), \"フォルダに新たなスニペットを追加する\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"手始めに、\\n\", _jsx(_components.a, {\n        href: \"/next-mdx-site/docs/tutorial/getting-started/\",\n        children: \"スニペットを登録する\"\n      }), \"\\nと同じ要領でスニペットを追加しておきます。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-md:data/snippets/useToggle.mdx\",\n        children: \"# UseToggle Hook\\n\\n```tsx\\nimport { useCallback, useState } from 'react';\\n\\nexport const useToggle = (initial = false) => {\\n  const [state, setState] = useState(initial);\\n\\n  const toggle = useCallback(() => {\\n    setState((b) => !b);\\n  }, []);\\n\\n  return [state, toggle];\\n};\\n```\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"タイトルの指定を-front-matter-で行う\",\n      children: \"タイトルの指定を Front Matter で行う\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"新しいスニペットを追加して早々、変更を加えるのは些か気が引けるものですが、\\n一覧ページを設けるにあたって修正を加えます。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"先ほど作成した MDX ファイルの先頭にタイトルを表す Front Matter を追加します。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-diff:data/snippets/useToggle.mdx\",\n        children: \"+ ---\\n+ title: 'UseToggle Hook'\\n+ ---\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"同様に、\\n\", _jsx(_components.a, {\n        href: \"/next-mdx-site/docs/tutorial/getting-started/\",\n        children: \"スニペットを登録する\"\n      }), \"\\nで作成した\", _jsx(_components.code, {\n        children: \"component.mdx\"\n      }), \"にも修正を加えます。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-diff:data/snippets/compoennt.mdx\",\n        children: \"+ ---\\n+ title: 'React Component'\\n+ ---\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これで一覧ページを作成する下準備が整いました。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"スニペットの一覧を設ける\",\n      children: \"スニペットの一覧を設ける\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"では、早速スニペットの一覧ページを設けましょう。\\n場所は\", _jsx(_components.code, {\n        children: \"pages/snippets/index.tsx\"\n      }), \"にします。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"実装は\", _jsx(_components.code, {\n        children: \"pages/blog/tags/index.tsx\"\n      }), \"とほとんど変わりません。\\n先ほど追加した Front Matter から\", _jsx(_components.code, {\n        children: \"title\"\n      }), \"を抽出していることに注目してください。\\nまた、\", _jsx(_components.code, {\n        children: \"PostTag\"\n      }), \"を流用している点については気にしないでください。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx:pages/snippets/index.tsx\",\n        children: \"import { DefaultPage } from '@/components/default';\\nimport { PostTag } from '@/components/PostTag';\\nimport { getAllFrontmatters } from '@/lib/mdx';\\nimport { Typography } from '@mui/material';\\nimport { Stack } from '@mui/system';\\nimport { GetStaticProps } from 'next';\\n\\ntype Props = {\\n  titles: string[];\\n};\\n\\nexport default function Page({ titles }: Props) {\\n  return (\\n    <DefaultPage>\\n      <Stack spacing={6}>\\n        <Typography variant=\\\"h1\\\">Snippets</Typography>\\n        <Stack direction=\\\"row\\\" flexWrap=\\\"wrap\\\" spacing={2}>\\n          {titles.map((title) => (\\n            <PostTag key={title} href={`/snippets/${title}`} label={title} />\\n          ))}\\n        </Stack>\\n      </Stack>\\n    </DefaultPage>\\n  );\\n}\\n\\nconst BASE_PATH = 'snippets';\\n\\nexport const getStaticProps: GetStaticProps<Props> = async () => {\\n  const frontmatters = getAllFrontmatters(BASE_PATH);\\n  const titles = frontmatters.map((frontmatter) => frontmatter.title);\\n\\n  return {\\n    props: {\\n      titles,\\n    },\\n  };\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"まとめ\",\n      children: \"まとめ\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ここでは、スニペットの一覧ページを作成しました。\\nまた、MDX ファイルに Front Matter を追加し、\\n\", _jsx(_components.code, {\n        children: \"pages\"\n      }), \"以下で抽出、表示を行いました。\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}